// header file for oreore-OS application
 const __sys_table  0x00000000004023d8
 const __boot_service  0x0000000000402458
 const EOF  0xffffffffffffffff
 const ERROR  0xffffffffffffffff
 const NULL  0x0000000000000000
 const SPACE  0x0000000000000020
 const CR  0x000000000000000d
 const LF  0x000000000000000a
 const PLUS  0x000000000000002b
 const MINUS  0x000000000000002d
 const MULT  0x000000000000002a
 const DIV  0x000000000000002f
 const ESC  0x000000000000001b
 const CONOUT  0x0000000000000001
 const CONIN  0x0000000000000002
 const NaN  0x8000000000000000
 const FILE_SIZE  0x0000000000000010
 const VOL_SIZE  0x0000000000000400
 const VOL_FP  0x0000000000000000
 const FILE_FP  0x0000000000000008
 const VOL_CLOSE0  0x0000000000000010
 const VOL_READ0  0x0000000000000020
 const FILE_OPEN  0x0000000000000008
 const FILE_CLOSE  0x0000000000000010
 const FILE_DELETE  0x0000000000000018
 const FILE_READ  0x0000000000000020
 const FILE_WRITE  0x0000000000000028
 const FILE_SET_POS  0x0000000000000030
 const FILE_GET_POS  0x0000000000000038
 const FILE_GET_INFO  0x0000000000000040
 const FILE_SET_INFO  0x0000000000000048
 const FILE_FLUSH  0x0000000000000050
 const TCB_SIZE  0x0000000000000080
 const STATUS  0x0000000000000000
 const CMD_LINE  0x0000000000000008
 const START  0x0000000000000010
 const SIZE  0x0000000000000018
 const STACK  0x0000000000000020
 const INDEV  0x0000000000000028
 const OUTDEV  0x0000000000000030
 const MESSAGE  0x0000000000000038
 const CLIENT  0x0000000000000040
 const RCX  0x0000000000000048
 const RDX  0x0000000000000050
 const RDI  0x0000000000000058
 const RSI  0x0000000000000060
 const NEXT_TCB  0x0000000000000068
 const PREV_TCB  0x0000000000000070
 const SP  0x0000000000000078
 const RUN  0x0000000000000000
 const READY  0x0000000000000001
 const WAIT  0x0000000000000002
 const _start  0x0000000000404000
 const dprint  0x000000000040444f
 const SYNC  0x0000000000000000
 const CREATE_TASK  0x0000000000000001
 const EXIT_TASK  0x0000000000000002
 const KILL_TASK  0x0000000000000003
 const RUN_TASK  0x0000000000000004
 const STOP_TASK  0x0000000000000005
 const WAIT_TASK  0x0000000000000006
 const GO_TASK  0x0000000000000007
 const RET_TASK  0x0000000000000008
 const SEND_MESSAGE  0x0000000000000009
 const GET_MESSAGE  0x000000000000000a
 const EXIT_PROCESS  0x000000000000000b
 const _WIDE  0x000000000000000c
 const _NALLOW  0x000000000000000d
 const GETC  0x000000000000000e
 const _READ  0x000000000000000f
 const PUTC  0x0000000000000010
 const _WRITE  0x0000000000000011
 const WOPEN  0x0000000000000012
 const ROPEN  0x0000000000000013
 const OPEN  0x0000000000000014
 const RCLOSE  0x0000000000000015
 const WCLOSE  0x0000000000000016
 const DELETE  0x0000000000000017
 const VOL_OPEN  0x0000000000000018
 const VOL_CLOSE  0x0000000000000019
 const VOL_READ  0x000000000000001a
 const FPRINTS  0x000000000000001b
 const FPRINTD  0x000000000000001c
 const FNL  0x000000000000001d
 const FINPUTS  0x000000000000001e
 const STRCMP  0x000000000000001f
 const STRNCMP  0x0000000000000020
 const STRCPY  0x0000000000000021
 const STRNCPY  0x0000000000000022
 const STRCAT  0x0000000000000023
 const STRNCAT  0x0000000000000024
 const STRSTR  0x0000000000000025
 const STRLEN  0x0000000000000026
 const ATOI  0x0000000000000027
 const ITOA  0x0000000000000028
 const BIN  0x0000000000000029
 const OCT  0x000000000000002a
 const DEC  0x000000000000002b
 const HEX  0x000000000000002c
 const ABS  0x000000000000002d
 const PALLOC  0x000000000000002e
 const PFREE  0x000000000000002f
 const MALLOC  0x0000000000000030
 const FREE  0x0000000000000031
 const LOAD  0x0000000000000032
 const EXEC_COMMAND  0x0000000000000033
 const LOCATE_PROTOCOL  0x0000000000000034
 const CLS  0x0000000000000064
 const LOCATE  0x0000000000000065
 const CURSOR  0x0000000000000066
 const INKEY  0x0000000000000067
 const GETCH  0x0000000000000068
 const PUTCH  0x0000000000000069
 const WPUTS  0x000000000000006a
 const math_sin  0x000000000040e5d7
 const math_cos  0x000000000040eb39
 const math_tan  0x000000000040ec38
 const math_arctan  0x000000000040eef8
 const math_exp  0x000000000040f9cb
 const math_log  0x0000000000410238
 const math_random  0x000000000041095a
 const math_power  0x00000000004109e7
 const xdraw_point  0x0000000000410b9d
 const xget_point  0x0000000000410dc6
 const xdraw_line  0x0000000000410f3c
 const xgcls  0x0000000000411b37
 const xfill_rect  0x0000000000411db2
 const xdraw_rect  0x00000000004123b1
 const xfill_circle  0x0000000000412bb1
 const xdraw_circle  0x0000000000412d29
 const xpaint  0x00000000004138d9
 const xdraw_image  0x0000000000414752
 const load_image  0x00000000004151db
 const save_image  0x00000000004158ec
 const xval  0x0000000000416980
 const xstr  0x00000000004185b6
 const printr  0x0000000000419ff9
 const fprintr  0x000000000041a0e5
 const __critical  0x000000000041b470
 const __stack_p  0x000000000041b478
 const __int_enable  0x000000000041b480
 const __int_busy  0x000000000041b488
 const __sys_nest  0x000000000041b490
 const time  0x000000000041b4a0
 const SYS_CALL  0x000000000041b4a8
 const SYS_EXT  0x000000000041b4b0
 const tasks  0x000000000041b4b8
 const present_task  0x000000000041b4c0
 const __stack_top  0x000000000041b4c8
 const tcb0  0x000000000041b4d0
 const cmd_buf  0x000000000041b660
 const argc  0x000000000041b960
 const argv  0x000000000041b968
 const graphic_protocol  0x000000000041bbd8
 const pointer_protocol  0x000000000041bbe0
 const graphic_mode  0x000000000041bbe8
 const graphic_info  0x000000000041bbf0
 const graphic_base  0x000000000041bbf8
 const set_mode  0x000000000041bc00
 const screen_width  0x000000000041bc08
 const screen_height  0x000000000041bc10
 const mouse_reset  0x000000000041bc18
 const mouse_get_state  0x000000000041bc20
 const xcolor  0x000000000041bdc0
 const xwidth  0x000000000041bdc8
 const xheight  0x000000000041bdd0
 const bitmap  0x000000000041bdd8
 const _end  0x0000000000423f78
// "stdio.base" the base text of "stdio.rh"

__xxmain1:
  goto __xxmain2

// TCB area
 .data
__tcb:
 data 0,0,0,0,0,0,0,0
 data 0,0,0,0,0,0,0,0

 long   read_p#

sync:
 @SYS_CALL(SYNC)
  end
create_task:
 @SYS_CALL(CREATE_TASK)
  end
exit_task:
 @SYS_CALL(EXIT_TASK)
  end
kill_task:
 @SYS_CALL(KILL_TASK)
  end
run_task:
 @SYS_CALL(RUN_TASK)
  end
stop_task:
 @SYS_CALL(STOP_TASK)
  end
wait_task:
 @SYS_CALL(WAIT_TASK)
  end
go_task:
 @SYS_CALL(GO_TASK)
  end
ret_task:
 @SYS_CALL(RET_TASK)
  end
send_message:
 @SYS_CALL(SEND_MESSAGE)
  end
get_message:
 @SYS_CALL(GET_MESSAGE)
  end
exit_process:
 @SYS_CALL(EXIT_PROCESS)
  end
_wide:
 @SYS_CALL(_WIDE)
  end
_nallow:
 @SYS_CALL(_NALLOW)
  end
getc:
 @SYS_CALL(GETC)
  end
_read:
 @SYS_CALL(_READ)
  end
putc:
 @SYS_CALL(PUTC)
  end
_write:
 @SYS_CALL(_WRITE)
  end
wopen:
 @SYS_CALL(WOPEN)
  end
ropen:
 @SYS_CALL(ROPEN)
  end
open:
 @SYS_CALL(OPEN)
  end
rclose:
 @SYS_CALL(RCLOSE)
  end
wclose:
 @SYS_CALL(WCLOSE)
  end
delete:
 @SYS_CALL(DELETE)
  end
vol_open:
 @SYS_CALL(VOL_OPEN)
  end
vol_close:
 @SYS_CALL(VOL_CLOSE)
  end
vol_read:
 @SYS_CALL(VOL_READ)
  end
fprints:
 @SYS_CALL(FPRINTS)
  end
fprintd:
 @SYS_CALL(FPRINTD)
  end
fnl:
 @SYS_CALL(FNL)
  end
finputs:
 @SYS_CALL(FINPUTS)
  end
strcmp:
 @SYS_CALL(STRCMP)
  end
strncmp:
 @SYS_CALL(STRNCMP)
  end
strcpy:
 @SYS_CALL(STRCPY)
  end
strncpy:
 @SYS_CALL(STRNCPY)
  end
strcat:
 @SYS_CALL(STRCAT)
  end
strncat:
 @SYS_CALL(STRNCAT)
  end
strstr:
 @SYS_CALL(STRSTR)
  end
strlen:
 @SYS_CALL(STRLEN)
  end
atoi:
 @SYS_CALL(ATOI)
  end
itoa:
 @SYS_CALL(ITOA)
  end
bin:
 @SYS_CALL(BIN)
  end
oct:
 @SYS_CALL(OCT)
  end
dec:
 @SYS_CALL(DEC)
  end
hex:
 @SYS_CALL(HEX)
  end
abs:
 @SYS_CALL(ABS)
  end
palloc:
 @SYS_CALL(PALLOC)
  end
pfree:
 @SYS_CALL(PFREE)
  end
malloc:
 @SYS_CALL(MALLOC)
  end
free:
 @SYS_CALL(FREE)
  end
load:
 @SYS_CALL(LOAD)
  end
locate_protocol:
 @SYS_CALL(LOCATE_PROTOCOL)
  end
cls:
 @SYS_CALL(CLS)
  end
locate:
 @SYS_CALL(LOCATE)
  end
cursor:
 @SYS_CALL(CURSOR)
  end
inkey:
 @SYS_CALL(INKEY)
  end
getch:
 @SYS_CALL(GETCH)
  end
putch:
 @SYS_CALL(PUTCH)
  end
wputs:
 @SYS_CALL(WPUTS)
  end
exec_command:
 @SYS_CALL(EXEC_COMMAND)
  end

putchar:
  stdout#, putc
  end
nl:
  stdout#, fnl
  end
prints:
  stdout#, fprints
  end
printd:
  stdout#, fprintd
  end
getchar:
  stdin#, getc
  end
inputs:
  stdin#, finputs
  end

restore:
 read_p#=
 end

read:
 read_p#, 8, + read_p#=
 (read_p)#(-1), end

wait:
  long _time_limit#
  time#, + _time_limit#=
__wait1:
  sync
  if time#<=_time_limit# goto __wait1
  end


__xxmain2:

  long   _indev#,_outdev#,stdin#,stdout#,_f#
  char  _infile$(FILE_SIZE),_outfile$(FILE_SIZE)

  CONIN,    stdin#=
  CONOUT, stdout#=
  (present_task)#(INDEV/8),    _indev#=
  (present_task)#(OUTDEV/8), _outdev#=
  if (_indev)$=NULL goto __xxmain3
    _indev#,  _infile, ropen _f#=
    if _f#<>ERROR then _infile, stdin#=
__xxmain3:
  if (_outdev)$=NULL goto __xxmain4
    _outdev#,  _outfile, wopen _f#=
    if _f#<>ERROR then _outfile, stdout#=
__xxmain4:
  if (present_task)$(CMD_LINE)='B' then "*** background ***", prints nl
  main
  stdin#,   rclose
  stdout#, wclose
  if (present_task)$(CMD_LINE)='F' then  (present_task)#(CLIENT/8), run_task
  exit_process
  end
